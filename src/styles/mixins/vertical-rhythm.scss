@use 'sass:math';

@mixin line-height($number) {
  line-height: #{$number * $line-height + 'rem'};
}

@mixin margin-top($number) {
  margin-top: #{$number * $leading + 'px'};
  margin-top: #{$number * $line-height + 'rem'};
}

@mixin margin-bottom($number) {
  margin-bottom: #{$number * $leading + 'px'};
  margin-bottom: #{$number * $line-height + 'rem'};
}

@mixin margin-left($number) {
  margin-left: #{$number * $leading + 'px'};
  margin-left: #{$number * $line-height + 'rem'};
}

@mixin margin-right($number) {
  margin-right: #{$number * $leading + 'px'};
  margin-right: #{$number * $line-height + 'rem'};
}

@mixin margin($xMargin, $yMargin: $xMargin) {
  margin: #{$xMargin * $leading + 'px'} #{$yMargin * $leading + 'px'};
  margin: #{$xMargin * $line-height + 'rem'} #{$yMargin * $line-height + 'rem'};
}

@mixin padding-top($number) {
  padding-top: #{$number * $leading + 'px'};
  padding-top: #{$number * $line-height + 'rem'};
}

@mixin padding-bottom($number) {
  padding-bottom: #{$number * $leading + 'px'};
  padding-bottom: #{$number * $line-height + 'rem'};
}

@mixin padding-left($number) {
  padding-left: #{$number * $leading + 'px'};
  padding-left: #{$number * $line-height + 'rem'};
}

@mixin padding-right($number) {
  padding-right: #{$number * $leading + 'px'};
  padding-right: #{$number * $line-height + 'rem'};
}

@mixin padding($xPadding, $yPadding: $xPadding) {
  padding: #{$xPadding * $leading + 'px'} #{$yPadding * $leading + 'px'};
  padding: #{$xPadding * $line-height + 'rem'} #{$yPadding * $line-height + 'rem'};
}

// Power function
@function pow($number, $exponent) {
  $value: 1;
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $value: $value * $number;
    }
  } @else if $exponent < 0 {
    @for $i from 1 through -$exponent {
      $value: math.div($value, $number);
    }
  }
  @return $value;
}

// Modular Scale function
@function ms($value, $ms-ratio: $ratio, $ms-base: $base) {
  $size: pow($ms-ratio, $value);
  @return #{$size + 'rem'};
}
